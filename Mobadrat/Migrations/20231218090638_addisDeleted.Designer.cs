// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mobadrat.Data;

namespace Mobadrat.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231218090638_addisDeleted")]
    partial class addisDeleted
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mobadrat.Models.Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchID");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Mobadrat.Models.Comment", b =>
                {
                    b.Property<int>("MobadraCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MobadraCommentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MobadraCommentID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Mobadrat.Models.CurrentSpot", b =>
                {
                    b.Property<int>("CurrentSpotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrentSpotName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrentSpotID");

                    b.ToTable("CurrentSpots");
                });

            modelBuilder.Entity("Mobadrat.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Mobadrat.Models.DurationTime", b =>
                {
                    b.Property<int>("DurationTimeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DurationTimeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DurationTimeID");

                    b.ToTable("DurationTimes");
                });

            modelBuilder.Entity("Mobadrat.Models.Geha_Traget", b =>
                {
                    b.Property<int>("Geha_TragetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Geha_TragetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Geha_TragetID");

                    b.ToTable("geha_Tragets");
                });

            modelBuilder.Entity("Mobadrat.Models.Mobadra", b =>
                {
                    b.Property<int>("MobadraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentSpotID")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DurationTimeID")
                        .HasColumnType("int");

                    b.Property<int>("Geha_TragetID")
                        .HasColumnType("int");

                    b.Property<string>("MobadraDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobadraImplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobadraTarget")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobadraTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VolunteerID")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("MobadraID");

                    b.HasIndex("BranchID");

                    b.HasIndex("CurrentSpotID");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DurationTimeID");

                    b.HasIndex("Geha_TragetID");

                    b.HasIndex("StatusID");

                    b.HasIndex("UserId");

                    b.HasIndex("VolunteerID");

                    b.ToTable("Mobadras");
                });

            modelBuilder.Entity("Mobadrat.Models.MobadraComment", b =>
                {
                    b.Property<int>("RecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MobadraCommentID")
                        .HasColumnType("int");

                    b.Property<string>("MobadraCommet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MobadraID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("RecordID");

                    b.HasIndex("MobadraCommentID");

                    b.HasIndex("MobadraID");

                    b.HasIndex("UserId");

                    b.ToTable("MobadraComments");
                });

            modelBuilder.Entity("Mobadrat.Models.MobadraUploadfile", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MobadraID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("FileId");

                    b.HasIndex("MobadraID");

                    b.HasIndex("UserId");

                    b.ToTable("MobadraUploadfiles");
                });

            modelBuilder.Entity("Mobadrat.Models.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusID");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Mobadrat.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateGorgian")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateDateHijry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EMPLOYEE_ID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentityNumber")
                        .HasColumnType("int");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SexName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.HasIndex("BranchID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Mobadrat.Models.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("Mobadrat.Models.Volunteer", b =>
                {
                    b.Property<int>("VolunteerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VolunteerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolunteerID");

                    b.ToTable("volunteers");
                });

            modelBuilder.Entity("Mobadrat.Models.Mobadra", b =>
                {
                    b.HasOne("Mobadrat.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mobadrat.Models.CurrentSpot", "CurrentSpot")
                        .WithMany()
                        .HasForeignKey("CurrentSpotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mobadrat.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mobadrat.Models.DurationTime", "DurationTime")
                        .WithMany()
                        .HasForeignKey("DurationTimeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mobadrat.Models.Geha_Traget", "Geha_Traget")
                        .WithMany()
                        .HasForeignKey("Geha_TragetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mobadrat.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mobadrat.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mobadrat.Models.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("CurrentSpot");

                    b.Navigation("Department");

                    b.Navigation("DurationTime");

                    b.Navigation("Geha_Traget");

                    b.Navigation("Status");

                    b.Navigation("User");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("Mobadrat.Models.MobadraComment", b =>
                {
                    b.HasOne("Mobadrat.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("MobadraCommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mobadrat.Models.Mobadra", "Mobadra")
                        .WithMany()
                        .HasForeignKey("MobadraID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mobadrat.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Mobadra");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mobadrat.Models.MobadraUploadfile", b =>
                {
                    b.HasOne("Mobadrat.Models.Mobadra", "Mobadra")
                        .WithMany()
                        .HasForeignKey("MobadraID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mobadrat.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mobadra");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mobadrat.Models.User", b =>
                {
                    b.HasOne("Mobadrat.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mobadrat.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mobadrat.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Department");

                    b.Navigation("UserType");
                });
#pragma warning restore 612, 618
        }
    }
}
